import org.gradle.kotlin.dsl.implementation
import org.springframework.boot.gradle.tasks.run.BootRun

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library`
    `maven-publish`
    id("org.springframework.boot") version "3.4.5"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
description = "testcontainers-java-spring-boot-quickstart"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://jitpack.io")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    implementation(platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES))
    implementation(platform("org.testcontainers:testcontainers-bom:1.21.0"))
    implementation("org.flywaydb:flyway-database-postgresql")

    api(libs.org.springframework.boot.spring.boot.starter.data.jpa)
    api(libs.org.springframework.boot.spring.boot.starter.validation)
    api(libs.org.springframework.boot.spring.boot.starter.web)
    api(libs.org.flywaydb.flyway.core)
    api(libs.org.springframework.spring.webflux)
    runtimeOnly(libs.org.springframework.boot.spring.boot.devtools)
    runtimeOnly(libs.org.postgresql.postgresql)
    runtimeOnly(libs.com.mysql.mysql.connector.j)
    testImplementation(libs.org.springframework.boot.spring.boot.starter.test)
    testImplementation(libs.org.springframework.boot.spring.boot.testcontainers)
    testImplementation(libs.org.testcontainers.junit.jupiter)
    testImplementation(libs.org.testcontainers.postgresql)
    testImplementation(libs.org.testcontainers.mysql)
    testImplementation(libs.com.github.wiremock.wiremock.testcontainers.java)
    testImplementation(libs.io.rest.assured.rest.assured)

    compileOnly("org.springframework.boot:spring-boot-devtools")
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
    targetCompatibility = "21"
    sourceCompatibility = "21"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.named<BootRun>("bootRun") {
    mainClass.set("com.example.todos.Application")
}
